{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./servicio-empleados.service\";\nimport * as i2 from \"./data.services\";\nexport class EmpleadosService {\n  // empleados: Empleado[] = [\n  //   // class Empleado empleado.model.ts\n  //   new Empleado('Juan', 'Díaz', 'Presidente', 5000),\n  //   new Empleado('Ana', 'Martón', 'Directora', 3500),\n  //   new Empleado('Laura', 'López', 'Jefa sección', 2800),\n  // ];\n  // servicio dentro de un servicio\n  constructor(servicioVentanaEmergente, dataService) {\n    this.servicioVentanaEmergente = servicioVentanaEmergente;\n    this.dataService = dataService;\n    this.empleados = [];\n  }\n  setEmpleados(misEmpleados) {\n    this.empleados = misEmpleados;\n  }\n  obtenerEmpleados() {\n    return this.dataService.cargarEmpleados();\n  }\n  agregarEmpleadoServicio(empleado) {\n    this.servicioVentanaEmergente.muestraMensaje('Agregando persona: \\n' + empleado.nombre + '\\n' + empleado.salario);\n    this.empleados.push(empleado);\n    this.dataService.guardarEmpleados(this.empleados);\n  }\n  // le pasamos el mismo parámetro\n  encontrarEmpleado(indice) {\n    // igual al array de empleados y su posición (índice)\n    let empleado = this.empleados[indice];\n    return empleado;\n  }\n  actualizarEmpleado(indice, empleado) {\n    let empleadoModificado = this.empleados[indice]; // almacenamos la información del empleado\n    empleadoModificado.nombre = empleado.nombre;\n    empleadoModificado.apellido = empleado.apellido;\n    empleadoModificado.cargo = empleado.cargo;\n    empleadoModificado.salario = empleado.salario;\n    this.dataService.actualizarEmpleado(indice, empleado);\n  }\n  // método splice() agregar y eliminar elementos en js\n  eliminarEmpleado(indice) {\n    this.empleados.splice(indice, 1);\n    this.dataService.eliminarEmpleado(indice);\n    window.location.reload();\n    if (this.empleados != null) this.dataService.guardarEmpleados(this.empleados); // resuelve el problema de borrado\n  }\n}\n\nEmpleadosService.ɵfac = function EmpleadosService_Factory(t) {\n  return new (t || EmpleadosService)(i0.ɵɵinject(i1.ServicioEmpleadosService), i0.ɵɵinject(i2.DataServices));\n};\nEmpleadosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmpleadosService,\n  factory: EmpleadosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,gBAAgB;EAE3B;EACA;EAEA;EACA;EACA;EACA;EAEA;EACAC,YAAoBC,wBAAkD,EAAUC,WAAwB;IAApF,6BAAwB,GAAxBD,wBAAwB;IAAoC,gBAAW,GAAXC,WAAW;IAV3F,cAAS,GAAe,EAAE;EAUiF;EAE3GC,YAAY,CAACC,YAAuB;IAClC,IAAI,CAACC,SAAS,GAAGD,YAAY;EAC/B;EAEAE,gBAAgB;IACd,OAAO,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE;EAC3C;EAGAC,uBAAuB,CAACC,QAAkB;IACxC,IAAI,CAACR,wBAAwB,CAACS,cAAc,CAC1C,uBAAuB,GAAGD,QAAQ,CAACE,MAAM,GAAG,IAAI,GAAGF,QAAQ,CAACG,OAAO,CACpE;IACD,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACJ,QAAQ,CAAC;IAC7B,IAAI,CAACP,WAAW,CAACY,gBAAgB,CAAC,IAAI,CAACT,SAAS,CAAC;EAEnD;EAEA;EACAU,iBAAiB,CAACC,MAAc;IAC9B;IACA,IAAIP,QAAQ,GAAa,IAAI,CAACJ,SAAS,CAACW,MAAM,CAAC;IAC/C,OAAOP,QAAQ;EACjB;EAEAQ,kBAAkB,CAACD,MAAc,EAAEP,QAAkB;IACnD,IAAIS,kBAAkB,GAAG,IAAI,CAACb,SAAS,CAACW,MAAM,CAAC,CAAC,CAAC;IACjDE,kBAAkB,CAACP,MAAM,GAAGF,QAAQ,CAACE,MAAM;IAC3CO,kBAAkB,CAACC,QAAQ,GAAGV,QAAQ,CAACU,QAAQ;IAC/CD,kBAAkB,CAACE,KAAK,GAAGX,QAAQ,CAACW,KAAK;IACzCF,kBAAkB,CAACN,OAAO,GAAGH,QAAQ,CAACG,OAAO;IAC7C,IAAI,CAACV,WAAW,CAACe,kBAAkB,CAACD,MAAM,EAAEP,QAAQ,CAAC;EACvD;EAEA;EACAY,gBAAgB,CAACL,MAAc;IAC7B,IAAI,CAACX,SAAS,CAACiB,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;IAChC,IAAI,CAACd,WAAW,CAACmB,gBAAgB,CAACL,MAAM,CAAC;IACzCO,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAExB,IAAI,IAAI,CAACpB,SAAS,IAAI,IAAI,EAAE,IAAI,CAACH,WAAW,CAACY,gBAAgB,CAAC,IAAI,CAACT,SAAS,CAAC,CAAC,CAAC;EACjF;;;AAtDWN,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA2B,SAAhB3B,gBAAgB;EAAA4B,YAFf;AAAM","names":["EmpleadosService","constructor","servicioVentanaEmergente","dataService","setEmpleados","misEmpleados","empleados","obtenerEmpleados","cargarEmpleados","agregarEmpleadoServicio","empleado","muestraMensaje","nombre","salario","push","guardarEmpleados","encontrarEmpleado","indice","actualizarEmpleado","empleadoModificado","apellido","cargo","eliminarEmpleado","splice","window","location","reload","factory","providedIn"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\masterD\\ANGULAR\\app-empleados\\src\\app\\empleados.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DataServices } from './data.services';\nimport { Empleado } from './empleado.model';\nimport { ServicioEmpleadosService } from './servicio-empleados.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmpleadosService {\n  empleados: Empleado[] = [];\n  // empleados: Empleado[] = [\n  //   // class Empleado empleado.model.ts\n\n  //   new Empleado('Juan', 'Díaz', 'Presidente', 5000),\n  //   new Empleado('Ana', 'Martón', 'Directora', 3500),\n  //   new Empleado('Laura', 'López', 'Jefa sección', 2800),\n  // ];\n\n  // servicio dentro de un servicio\n  constructor(private servicioVentanaEmergente: ServicioEmpleadosService, private dataService:DataServices) {}\n\n  setEmpleados(misEmpleados:Empleado[]) {\n    this.empleados = misEmpleados;\n  }\n\n  obtenerEmpleados() {\n    return this.dataService.cargarEmpleados();\n  }\n\n\n  agregarEmpleadoServicio(empleado: Empleado) {\n    this.servicioVentanaEmergente.muestraMensaje(\n      'Agregando persona: \\n' + empleado.nombre + '\\n' + empleado.salario\n    );\n    this.empleados.push(empleado);\n    this.dataService.guardarEmpleados(this.empleados);\n\n  }\n\n  // le pasamos el mismo parámetro\n  encontrarEmpleado(indice: number) {\n    // igual al array de empleados y su posición (índice)\n    let empleado: Empleado = this.empleados[indice];\n    return empleado;\n  }\n\n  actualizarEmpleado(indice: number, empleado: Empleado) {\n    let empleadoModificado = this.empleados[indice]; // almacenamos la información del empleado\n    empleadoModificado.nombre = empleado.nombre;\n    empleadoModificado.apellido = empleado.apellido;\n    empleadoModificado.cargo = empleado.cargo;\n    empleadoModificado.salario = empleado.salario;\n    this.dataService.actualizarEmpleado(indice, empleado);\n  }\n  \n  // método splice() agregar y eliminar elementos en js\n  eliminarEmpleado(indice: number) {\n    this.empleados.splice(indice, 1);\n    this.dataService.eliminarEmpleado(indice);\n    window.location.reload();\n\n    if (this.empleados != null) this.dataService.guardarEmpleados(this.empleados); // resuelve el problema de borrado\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}