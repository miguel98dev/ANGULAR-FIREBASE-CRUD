{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./servicio-empleados.service\";\nimport * as i2 from \"./data.services\";\nexport class EmpleadosService {\n  // empleados: Empleado[] = [\n  //   // class Empleado empleado.model.ts\n  //   new Empleado('Juan', 'Díaz', 'Presidente', 5000),\n  //   new Empleado('Ana', 'Martón', 'Directora', 3500),\n  //   new Empleado('Laura', 'López', 'Jefa sección', 2800),\n  // ];\n  // servicio dentro de un servicio\n  constructor(servicioVentanaEmergente, dataService) {\n    this.servicioVentanaEmergente = servicioVentanaEmergente;\n    this.dataService = dataService;\n    this.empleados = [];\n  }\n  setEmpleados(misEmpleados) {\n    this.empleados = misEmpleados;\n  }\n  obtenerEmpleados() {\n    return this.dataService.cargarEmpleados();\n  }\n  agregarEmpleadoServicio(empleado) {\n    this.servicioVentanaEmergente.muestraMensaje('Agregando persona: \\n' + empleado.nombre + '\\n' + empleado.salario);\n    this.empleados.push(empleado);\n    this.dataService.guardarEmpleados(this.empleados);\n  }\n  // le pasamos el mismo parámetro\n  encontrarEmpleado(indice) {\n    // igual al array de empleados y su posición (índice)\n    let empleado = this.empleados[indice];\n    return empleado;\n  }\n  actualizarEmpleado(indice, empleado) {\n    let empleadoModificado = this.empleados[indice]; // almacenamos la información del empleado\n    empleadoModificado.nombre = empleado.nombre;\n    empleadoModificado.apellido = empleado.apellido;\n    empleadoModificado.cargo = empleado.cargo;\n    empleadoModificado.salario = empleado.salario;\n    this.dataService.actualizarEmpleado(indice, empleado);\n  }\n  // método splice() agregar y eliminar elementos en js\n  eliminarEmpleado(indice) {\n    this.empleados.splice(indice, 1);\n    this.dataService.eliminarEmpleado(indice);\n    if (this.empleados != null) this.dataService.guardarEmpleados(this.empleados); // resuelve el problema de borrado\n  }\n}\n\nEmpleadosService.ɵfac = function EmpleadosService_Factory(t) {\n  return new (t || EmpleadosService)(i0.ɵɵinject(i1.ServicioEmpleadosService), i0.ɵɵinject(i2.DataServices));\n};\nEmpleadosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmpleadosService,\n  factory: EmpleadosService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}